[{"id":1611196500,"title":"level2","author":"Anand Simmy","date":"January 21, 2021","time":"08:05","thumbnail":"/images/images.jpeg","content":"testing"},{"id":1611196380,"title":"Test","author":"Anand Simmy","date":"January 21, 2021","time":"08:03","thumbnail":"/images/ai-article-pic8.jpg","content":"Test"},{"id":1611117420,"title":"Pipeline Builder","author":"AnandSimmy","date":"January 20, 2021","time":"10:07","thumbnail":"/images/download-1-.jpeg","content":"Testing"},{"id":1611111360,"title":"Help Documentation","author":"Anand Simmy","date":"January 20, 2021","time":"08:26","thumbnail":"/images/lenet-5-1998.png","content":"# RZT aiOS Data transport methods\n\nRZT aiOS blocks, irrespective of pre-built or custom, can be executed [either individually as a single block](https://ecstatic-jackson-f4a13a.netlify.app/docs/Quick-start-guides/create_block.md) or [as part of a pipeline](https://ecstatic-jackson-f4a13a.netlify.app/docs/Quick-start-guides/create_pipeline.md.)\n\nOther aspects a user is concerned about while running a block is the execution environment and the mechanism by which data is moved from one block to next\n\nIn this document, we talk about different execution environments in details. To learn about different data transfer methods see [Data transport between blocks](https://ecstatic-jackson-f4a13a.netlify.app/docs/Quick-start-guides/data_transport.md)"},{"id":1611108060,"title":"Create Pipeline","author":"Anand Simmy","date":"January 20, 2021","time":"07:31","thumbnail":"/images/download-1-.jpeg","content":"\n\n# Creating and publishing blocks and pipelines\n\nThis tutorial guides you through the steps required to publish custom built blocks and pipelines to RZT aiOS. A published block can be later imported in Jupyter notebook and it will also be shown in IDE pipeline builder. Similarly, a pipeline created in Jupyter notebook using published blocks can be saved so that it can be accessed later from IDE and Jupyter notebook.\n\nEvery block is published with an associated`bundle name`which is analogous to a python module name. In order to publish a block, the block code should be placed in certain hierarchy of directories. A block can be published with two different scopes\n\n*"},{"id":1611107460,"title":"Introducing Pipelines","author":"Anand Simmy","date":"January 20, 2021","time":"07:21","thumbnail":"/images/download.jpeg","content":"# Introducing Pipelines\n\n## Pipeline Basics\n\n### Problem\n\nYou want to chain blocks together so that the output of one block is fed into another.\n\n### Solution\n\nUp until now, each block was run individually using the`.execute`method of the block. While it is possible to manually collect the output from one block and provide it as an input parameter to the next, to reap the full benefits of all the features of inter-connecting blocks, you'll need to create a pipeline.\n\nA Pipeline is essentially a DAG (Directed Acyclic Graph) of blocks where data flows only in one direction. An example of a pipeline is as shown bellow.\n\nThe first step would be define the blocks for the pipeline as bellow"},{"id":1611105720,"title":"Pipeline Builder Help","author":"Anand Simmy","date":"January 20, 2021","time":"06:52","thumbnail":"/images/download.png","content":"# Introducing Pipelines\n\n## Pipeline Basics\n\n### Problem\n\nYou want to chain blocks together so that the output of one block is fed into another.\n\n### Solution\n\nUp until now, each block was run individually using the`.execute`method of the block. While it is possible to manually collect the output from one block and provide it as an input parameter to the next, to reap the full benefits of all the features of inter-connecting blocks, you'll need to create a pipeline.\n\nA Pipeline is essentially a DAG (Directed Acyclic Graph) of blocks where data flows only in one direction. An example of a pipeline is as shown bellow.\n\nThe first step would be define the blocks for the pipeline as bellow"},{"id":1611051780,"title":"Documentation by Anand Simmy","author":"Anand Simmy","date":"January 19, 2021","time":"15:53","thumbnail":"/images/netlifyicon.png","content":"Testing documentation"}]